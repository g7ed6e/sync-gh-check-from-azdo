# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main

jobs:
- job: job1
  pool:
    vmImage: ubuntu-latest
  steps:
  - bash: |
      # Mark the job as succeeded with warnings
      echo "##vso[task.complete result=SucceededWithIssues;]DONE"
    displayName: 'Run a bash script'

- job: job4
  pool:
    vmImage: ubuntu-latest
  steps:
  - bash: |
      # Mark the job as 
      echo "hello world"
    displayName: 'Run a bash script'



# - job: job2
#   dependsOn: job1
#   pool:
#     vmImage: ubuntu-latest
#   steps:
#   - powershell: |
#       # Get the HEAD commit ID
#       $commitId="$(Build.SourceVersion)"
#       Write-Host "Commit ID: $commitId"
      
#       # Get the repo name
#       $repoName="$(Build.Repository.Name)"
#       Write-Host "Repo Name: $repoName"

#       # Fetch Check Suites from GitHub matching this commit ID
#       # /repos/{owner}/{repo}/commits/{ref}/check-suites    
#       $uri = "https://api.github.com/repos/$($repoName)/commits/$($commitId)/check-suites"
#       Write-Host "URI: $uri"
#       $headers = @{ "Accept" = "application/vnd.github+json"; "X-GitHub-Api-Version" = "2022-11-28" }
#       $response = Invoke-RestMethod -Uri $uri -Headers $headers -Method Get
      
#       # format the response as JSON and print it
#       Write-Host ($response | ConvertTo-Json -Depth 100)
      
#       # /repos/{owner}/{repo}/check-suites/{check_suite_id}
#       $checkSuiteId = $response.check_suites[0].id
#       Write-Host "Check Suite ID: $checkSuiteId"
#       $uri = "https://api.github.com/repos/$($repoName)/check-suites/$($checkSuiteId)"
#       Write-Host "URI: $uri"
#       $response = Invoke-RestMethod -Uri $uri -Headers $headers -Method Get
#       # format the response as JSON and print it
#       Write-Host ($response | ConvertTo-Json -Depth 100)

#       # /repos/{owner}/{repo}/check-suites/{check_suite_id}/check-runs
#       $uri = "https://api.github.com/repos/$($repoName)/check-suites/$($checkSuiteId)/check-runs"
#       Write-Host "URI: $uri"
#       $response = Invoke-RestMethod -Uri $uri -Headers $headers -Method Get
#       # format the response as JSON and print it
#       Write-Host ($response | ConvertTo-Json -Depth 100)

#       # /repos/{owner}/{repo}/check-runs/{check_run_id}
#       # loop through the check runs 
#       foreach ($checkRun in $response.check_runs) {
#         $checkRunId = $checkRun.id
#         Write-Host "Check Run ID: $checkRunId"
#         $uri = "https://api.github.com/repos/$($repoName)/check-runs/$($checkRunId)"
#         Write-Host "URI: $uri"
#         $response = Invoke-RestMethod -Uri $uri -Headers $headers -Method Get
#         # format the response as JSON and print it
#         Write-Host ($response | ConvertTo-Json -Depth 100)
#       }
#     displayName: 'Run a PowerShell script'

# - job: job3
#   dependsOn: job1
#   pool:
#     vmImage: ubuntu-latest
#   steps:
#   - powershell: |
#       # Get the HEAD commit ID
#       $commitId="$(Build.SourceVersion)"
#       Write-Host "Commit ID: $commitId"
      
#       # Get the repo name
#       $repoName="$(Build.Repository.Name)"
#       Write-Host "Repo Name: $repoName"

#       # Fetch Check Runs from GitHub matching this commit ID
#       # /repos/{owner}/{repo}/commits/{ref}/check-runs
#       $uri = "https://api.github.com/repos/$($repoName)/commits/$($commitId)/check-runs"
#       Write-Host "URI: $uri"
#       $headers = @{ "Accept" = "application/vnd.github+json"; "X-GitHub-Api-Version" = "2022-11-28" }
#       $response = Invoke-RestMethod -Uri $uri -Headers $headers -Method Get
#       # format the response as JSON and print it
#       Write-Host ($response | ConvertTo-Json -Depth 100)
#       # Loop through the check runs
#       # foreach ($checkRun in $response.check_runs) {
#       #   $checkRunId = $checkRun.id
#       #   Write-Host "Check Run ID: $checkRunId"
#       #   $uri = "https://api.github.com/repos/$($repoName)/check-runs/$($checkRunId)"
#       #   Write-Host "URI: $uri"
#       #   $response = Invoke-RestMethod -Uri $uri -Headers $headers -Method Get
#       #   # format the response as JSON and print it
#       #   Write-Host ($response | ConvertTo-Json -Depth 100)
#       # }

#       # find the check runs which output title matche "succeeded with issues"
#       $checkRuns = $response.check_runs | Where-Object { $_.output.title -contains "succeeded with issues" }




   
#     displayName: 'Run a PowerShell script'